import telebot
import schedule
from loguru import logger
import sys
from config import token, chat_id, radio_url, monitoring_chat_id
import requests
import os
import asyncio
from shazamio import Shazam
import nest_asyncio
from time import sleep
from tqdm import tqdm

logger.remove()
logger.add("./log/file_{time}.log", rotation="100 MB")
logger.add(sink=sys.stderr, format="{time:D MMMM YYYY > HH:mm:ss} | {level} | {message}")
bot = telebot.TeleBot(token)
prev_artist = ''
prev_track = ''
nest_asyncio.apply()


def check(artist, track):
    global prev_artist
    global prev_track
    logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç –∏ —Ç—Ä—ç–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏')
    if artist != prev_artist and track != prev_track:
        logger.info(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}, —Ç—Ä—ç–∫: {track}')
        logger.info('–ê—Ä—Ç–∏—Å—Ç –∏ —Ç—Ä—ç–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏. –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        prev_artist = artist
        prev_track = track
        return True
    logger.info(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}, —Ç—Ä—ç–∫: {track}')
    logger.info('–ê—Ä—Ç–∏—Å—Ç –∏ —Ç—Ä—ç–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏. –ò–≥–Ω–æ—Ä–∏–º.')
    return False


async def recognize():
    shazam = Shazam()
    logger.info('–†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª')
    text = await shazam.recognize('radio_stream.mp3')
    logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ —Ñ–∞–π–ª–∞')
    try:
        if text.get('matches'):
            logger.info('–£–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä—ç–∫–∞ –∏ —Ñ–æ—Ç–æ')
            artist = text.get('track').get('subtitle')
            track = text.get('track').get('title')
            photo = text.get('track').get('images').get('background')

            if check(artist=artist, track=track):
                logger.info('–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª')
                caption = f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å üéô: <b>{artist}</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä—ç–∫–∞ üé∂: <b>{track}</b>'
                bot.send_photo(chat_id, photo=photo, caption=caption, disable_notification=True, parse_mode="html")
        else:
            logger.info('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.')
    except AttributeError as e:
        bot.send_message(monitoring_chat_id,  text="–ß—Ç–æ-—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑")
        logger.warning('–ß—Ç–æ-—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑')
        logger.warning(e)
        pass


def record():
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        'DNT': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Chromium";v="124", "Google Chrome";v="124", "Not-A.Brand";v="99"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
    }
    try:
        logger.info('-' * 30)
        logger.info('–ü–æ–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫—É')
        filename = "radio_stream.mp3"
        response = requests.get(radio_url, headers=headers, stream=True)
        response.raise_for_status()

        with open(filename, "wb") as f:
            logger.info('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏, –ø–∏—à–µ–º –ø–æ—Ç–æ–∫ –≤ —Ñ–∞–π–ª')
            for chunk in tqdm(response.iter_content(chunk_size=32), ncols=80, ascii=True, desc='–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª:'):
                if chunk:
                    if os.path.getsize("radio_stream.mp3") >= 524288:
                        logger.info('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –í—ã—Ö–æ–¥–∏–º')
                        break
                    f.write(chunk)
    except Exception:
        bot.send_message(monitoring_chat_id,  text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥...")
        logger.warning('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥...')
        sleep(15)
        pass


def job():
    record()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(recognize())
    

def main():
    schedule.every(90).seconds.do(job)
    while True:
        schedule.run_pending()



if __name__ == "__main__":
    try:
        logger.info('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞')
        main()
    except KeyboardInterrupt:
        logger.warning('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        logger.warning(e)
    finally:
        bot.send_message(monitoring_chat_id,  text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!!! –ë–µ–≥–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ!!!")
        logger.info('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
